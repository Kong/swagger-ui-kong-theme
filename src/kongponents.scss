@use "sass:meta";
@use "sass:map";

// Import Kongponents Sass variables (path may vary)
@import "~@kong/kongponents/dist/_variables.scss";

:host {
  // Include Kongponents CSS Variables mixin from the import above
  @include kongponents-css-variables;

  // Import Kongponents styles (path may vary)
  @include meta.load-css("../node_modules/@kong/kongponents/dist/style.css");
}

@mixin boxShadow($color, $whiteShadowSpred: 2px, $colorShadowSpread: 4px) {
  box-shadow: 0 0 0 $whiteShadowSpred var(--white, map.get($colors, 'white')), 0 0 0 $colorShadowSpread $color;
}

.k-button {
  position: relative;
  display: inline-flex;
  align-items: center;
  padding: var(--KButtonPaddingY, var(--spacing-sm, spacing(sm))) var(--KButtonPaddingX, var(--spacing-lg, spacing(lg)));
  font-family: var(--font-family-sans, font(sans));
  font-size: var(--KButtonFontSize, var(--type-md, type(md)));
  font-weight: 400;
  line-height: 1.25;
  text-decoration: none;
  vertical-align: middle;
  color: var(--black-70, map.get($colors,"black-70"));
  border: 1px solid transparent;
  border-radius: var(--KButtonRadius, 3px);
  transition: all .2s ease-in-out;
  cursor: pointer;
  &:disabled,
  &[disabled] {
    cursor: not-allowed;
    &:hover {
      // ! is needed to ensure any type (a, button) keeps disabled state
      text-decoration: none !important;
    }
  }
  // remove pointer events from only <a>
  &[disabled]:not(:disabled) {
    pointer-events: none;
  }
  &:focus {
    outline: none;
  }
  /* Button w/ Icon */
  > .kong-icon {
    padding-right: var(--spacing-xs, spacing(xs));
    box-sizing: unset;
  }
  .kong-icon,
  .kong-icon > svg {
    width: 1rem !important;
    height: 1rem !important;
  }
  &.icon-btn {
    height: 38px;
    justify-content: center;
    > .kong-icon {
      padding-right: 0;
    }
  }
  /* Size Variations */
  &.small {
    padding: var(--spacing-xs, spacing(xs)) var(--spacing-md, spacing(md));
    font-size: var(--KButtonFontSize, 13px);
    line-height: 13px;
  }
  &.medium {
    padding: var(--spacing-sm, spacing(sm)) var(--spacing-lg, spacing(lg)) ;
    font-size: var(--KButtonFontSize, var(--type-md, type(md)));
    line-height: var(--type-md, type(md));
  }
  &.large {
    padding: var(--spacing-md, spacing(md)) var(--spacing-xl, spacing(xl)) ;
    font-size: var(--KButtonFontSize, var(--type-md, type(md)));
    line-height: var(--type-md, type(md));
  }
  /* class to add for dropdown caret */
  & .caret {
    margin-left: 15px;
    padding: 0;
    display: inline-block;
    transition: 250ms ease;
    &.is-active {
      transform: rotate(-180deg);
      transition: 250ms ease;
    }
  }
  /* Apperance Variations */
  &.secondary {
    border-color: var(--KButtonSecondaryBorder,var(--black-10,rgba(0,0,0,.1))) !important;
    color: var(--text_colors-primary) !important;

    &:hover, &:active, &:hover:not(:disabled) {
      border-color: var(--KButtonSecondaryHoverBorder,var(--black-45,rgba(0,0,0,.45))) !important;
      background-color: var(--KButtonSecondaryBase) !important;
    }
    &:focus {
      box-shadow: 0 0 0 2px var(--white,#fff),0 0 0 4px var(--KButtonSecondaryHoverBorder,var(--blue-500,#1155cb)) !important;
    }
    &:disabled,
    &[disabled] {
      background-color: var(--grey-300);
      color: var(--grey-400);
    }
  }
  &.primary {
    color: var(--button_colors-primary-text, #fff);
    background-color: var(--KButtonPrimaryBase, var(--blue-500, map.get($colors, 'blue-500')));
    &:hover:not(:disabled) {
      opacity: 0.85;
      background-color: var(--KButtonPrimaryHover, var(--blue-600));
    }
    &:active {
      opacity: 0.5;
      background-color: var(--KButtonPrimaryActive, var(--blue-600, map.get($colors, 'blue-600')));
    }
    &:focus {
      @include boxShadow(var(--KButtonPrimaryBase, var(--blue-500, map.get($colors, 'blue-500'))));
    }
    &:disabled,
    &[disabled] {
      background-color: var(--grey-300);
      color: var(--grey-400);
    }
  }
  &.danger {
    color: var(--white, #fff);
    background-color: var(--KButtonDangerBase, var(--red-500, map.get($colors, 'red-500')));
    &:hover:not(:disabled) {
      $hover: rgba(map.get($colors, 'red-700'), .85);
      background-color: var(--KButtonDangerHover, $hover);
    }
    &:active {
      background-color: var(--KButtonDangerActive, var(--red-700, map.get($colors, 'red-700')));
    }
    &:focus {
      @include boxShadow(var(--KButtonDangerBase, var(--red-700, map.get($colors, 'red-700'))));
    }
    &:disabled,
    &[disabled] {
      background-color: var(--grey-300);
      color: var(--grey-400);
    }
  }
  &.creation {
    color: var(--white, #fff);
    background-color: var(--KButtonCreationBase, var(--green-500, map.get($colors, 'green-500')));
    &:hover:not(:disabled) {
      $hover: rgba(map.get($colors, 'green-600'), .85);
      background-color: var(--KButtonCreationHover, $hover);
    }
    &:active {
      background-color: var(--KButtonCreationActive, var(--green-600, map.get($colors, 'green-600')));
    }
    &:focus {
      @include boxShadow(var(--KButtonCreationBase, var(--green-600, map.get($colors, 'green-600'))));
    }
    &:disabled,
    &[disabled] {
      background-color: var(--grey-300);
      color: var(--grey-400);
    }
  }
  &.outline {
    color: var(--KButtonOutlineColor, var(--blue-500, map.get($colors, 'blue-500')));
    border-color: var(--KButtonOutlineBorder, rgba(map.get($colors, 'blue-500'), .4));
    background-color: var(--white, map.get($colors, 'white'));
    &:hover:not(:disabled) {
      border-color: var(--KButtonOutlineHoverBorder, rgba(map.get($colors, 'blue-500'), 1));
    }
    &:active {
      border-color: var(--KButtonOutlineActiveBorder, rgba(map.get($colors, 'blue-500'), 1));
      background-color: var(--KButtonOutlineActive, var(--blue-100, map.get($colors, 'blue-100')));
    }
    &:focus {
      @include boxShadow(var(--KButtonOutlineBorder, var(--blue-500, map.get($colors, 'blue-500'))));
    }
    &:disabled,
    &[disabled] {
      border-color: var(--grey-400);
      color: var(--grey-400);
    }
  }
  &.btn-link {
    color: var(--KButtonBtnLink, var(--blue-500, map.get($colors, 'blue-500')));
    background-color: transparent;
    &:hover:not(:disabled) {
      text-decoration: underline;
    }
    &:focus {
      @include boxShadow(var(--blue-500, map.get($colors, 'blue-500')), 0, 2px);
    }
    &:disabled,
    &[disabled] {
      color: var(--grey-400);
    }
  }
  &.rounded {
    border-radius: 100px;
  }
}
